{"version":3,"sources":["components/game/DrawGrid.js","App.js","index.js"],"names":["operations","DrawEmptyGrid","rows","i","push","Array","from","DrawGrid","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","currentGrid","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","onClick","Math","random","style","display","gridTemplateColumns","map","col","key","newGrid","width","height","backgroundColor","undefined","border","App","props","flexDirection","alignContent","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sJAMMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAIDC,EAAgB,WAGpB,IAFA,IAAMC,EAAO,GAEJC,EAAI,EAAGA,EAlBF,GAkBeA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAlBT,KAkByB,kBAAM,MAE7C,OAAOH,GAGIK,EAAW,WAAM,MAEJC,oBAAS,WAC/B,OAAOP,OAHmB,mBAErBQ,EAFqB,KAEfC,EAFe,OAOEF,oBAAS,GAPX,mBAOrBG,EAPqB,KAOZC,EAPY,KAUtBC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAGrB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAIhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAa,SAACE,GAC3B,IADyC,IAAD,WAC/BjB,GACP,IAFsC,eAE7BkB,GAEP,IAAIC,EAAY,EAChBtB,EAAWuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOvB,EAAIqB,EACXG,EAAON,EAAII,EAEbC,GAAQ,GAAKA,EArDf,IAqDiCC,GAAQ,GAAKA,EApD9C,KAqDAL,GAAaJ,EAAYQ,GAAMC,OAI/BL,EAAY,GAAKA,EAAY,EAC/BF,EAASjB,GAAGkB,GAAK,EACc,IAAtBH,EAAYf,GAAGkB,IAA0B,IAAdC,IACpCF,EAASjB,GAAGkB,GAAK,IAfZA,EAAI,EAAGA,EA7CV,GA6CuBA,IAAM,EAA1BA,IADFlB,EAAI,EAAGA,EA7CR,GA6CqBA,IAAM,EAA1BA,SAwBbyB,WAAWZ,EAAe,QACzB,IAEH,OACE,oCACE,4BACEa,QAAS,WACPjB,GAAYD,GACPA,IAEHE,EAAWE,SAAU,EACrBC,OAIHL,EAAU,OAAS,SAEtB,4BACEkB,QAAS,WACPnB,EAAQT,OAFZ,SAOA,4BACE4B,QAAS,WAEP,IADA,IAAM3B,EAAO,GACJC,EAAI,EAAGA,EAhGV,GAgGuBA,IAC3BD,EAAKE,KACHC,MAAMC,KAAKD,MAjGT,KAiGyB,kBAAOyB,KAAKC,SAAW,GAAM,EAAI,MAIhErB,EAAQR,KATZ,aAcA,yBACE8B,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OA7Gb,GA6Ga,aAGpBzB,EAAK0B,KAAI,SAACjC,EAAMC,GAAP,OACRD,EAAKiC,KAAI,SAACC,EAAKf,GAAN,OACP,yBACEgB,IAAG,UAAKlC,EAAL,YAAUkB,GACbQ,QAAS,WACP,IAAMS,EAAUnB,YAAQV,GAAM,SAACW,GAC7BA,EAASjB,GAAGkB,GAAKZ,EAAKN,GAAGkB,GAAK,EAAI,KAEpCX,EAAQ4B,IAEVN,MAAO,CACLO,MAAO,GACPC,OAAQ,GACRC,gBAAiBhC,EAAKN,GAAGkB,GAAK,eAAYqB,EAC1CC,OAAQ,8BCrHTC,MAVf,SAAaC,GACX,OACA,oCACE,yBAAKb,MAAO,CAACC,QAAS,OAAQa,cAAe,SAAUC,aAAc,SAAUC,SAAU,SACzF,kBAAC,EAAD,SCHJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.05d76e3e.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react'\nimport produce from 'immer'\n\nconst numRows = 50\nconst numCols = 50\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n]\n\n// initialize empty grid\nconst DrawEmptyGrid = () => {\n  const rows = []\n  //builds 2d array of 0's\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0))\n  }\n  return rows\n}\n\nexport const DrawGrid = () => {\n  // initialize and store empty grid in useState hook\n  const [grid, setGrid] = useState(() => {\n    return DrawEmptyGrid()\n  })\n\n  // store simulation status in state\n  const [running, setRunning] = useState(false)\n\n  // track current simulation state in useRef hook\n  const runningRef = useRef(running)\n  runningRef.current = running\n\n  //function to begin running simulation (useCallback hook prevents rerunning the function on each render)\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return\n    }\n    // make a copy of the grid that can be mutated\n    setGrid((currentGrid) => {\n      return produce(currentGrid, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            // count number of neighbors around each cell\n            let neighbors = 0\n            operations.forEach(([x, y]) => {\n              const newI = i + x\n              const newJ = j + y\n              // check bounds of grid\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                neighbors += currentGrid[newI][newJ]\n              }\n            })\n            // logic for if cell lives or dies in next generation\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = 0\n            } else if (currentGrid[i][j] === 0 && neighbors === 3) {\n              gridCopy[i][j] = 1\n            }\n          }\n        }\n      })\n    })\n\n    // recursivly call runSimulation to advance to the next state at 100ms interval\n    setTimeout(runSimulation, 100)\n  }, [])\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setRunning(!running)\n          if (!running) {\n            // prevent race conditions\n            runningRef.current = true\n            runSimulation()\n          }\n        }}\n      >\n        {running ? 'Stop' : 'Start'}\n      </button>\n      <button\n        onClick={() => {\n          setGrid(DrawEmptyGrid())\n        }}\n      >\n        Clear\n      </button>\n      <button\n        onClick={() => {\n          const rows = []\n          for (let i = 0; i < numRows; i++) {\n            rows.push(\n              Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n            )\n          }\n\n          setGrid(rows)\n        }}\n      >\n        Randomize\n      </button>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, j) => (\n            <div\n              key={`${i}-${j}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][j] = grid[i][j] ? 0 : 1\n                })\n                setGrid(newGrid)\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][j] ? 'hotpink' : undefined,\n                border: 'solid 1px black',\n              }}\n            />\n          ))\n        )}\n      </div>\n    </>\n  )\n}\n","import React from 'react';\nimport { DrawGrid } from './components/game/DrawGrid'\n\nfunction App(props) {\n  return (\n  <>\n    <div style={{display: 'flex', flexDirection: 'column', alignContent: 'center', maxWidth: '80vw'}}>\n    <DrawGrid />\n    </div>\n  </>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}